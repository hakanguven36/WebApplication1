@{
    ViewData["Title"] = "Home Page";
}

@section Styles {
    <style>
        .secBtn {
            color: white;
        }
            .secBtn:hover {
                color: white !important;
            }
    </style>
}
<input type="hidden" id="imagesrc" value="@ViewBag.path"/>
<input type="hidden" id="seenBackend" value="@ViewBag.seen" />
<input type="hidden" id="imageID" value="@ViewBag.imageID" />
<input type="hidden" id="filesCount" value="@ViewBag.filesCount" />
<input type="hidden" id="imageNo" value="@ViewBag.imageNo" />

@if (!string.IsNullOrWhiteSpace(ViewBag.hata))
{
    <span class="text-danger">HATA: @ViewBag.hata</span>
}
<table class="table table-sm table-borderless" style="width:100%">
    <tr>
        <td colspan="2" style="border-bottom:1px gray solid; padding-bottom:18px">
            <span>
                <span id="naviScreen" style="cursor:pointer" class="p-2"></span>
            </span>
            <button class="btn btn-sm btn-secondary" onclick="NavigateBackward()"><< Geri</button>
            <button class="btn btn-sm btn-secondary" onclick="NavigateForward()">İleri >></button>
            <span class="p-2">
                <select id="seen" class="form-control-sm">
                    <option value="0">İşlenmemişler</option>
                    <option value="1">İşlenmişler</option>
                    <option value="2">Tamamı</option>
                </select>
            </span>
            <span class="p-2"> || </span>
            <button class="btn btn-sm btn-success" onclick="Completed()"> Etiketleri Kaydet </button>
            <span class="p-2"> || </span>
            <button class="btn btn-sm btn-outline-danger" onclick="DeletePhoto()"> Resmi Sil </button>
        </td>
    </tr>  
    <tr>
        <td style="vertical-align:bottom">
            <span style="border: solid 1px gray; border-radius: 2px; padding: 3px">
                <span style="margin: 4px; margin-right: 10px; cursor: pointer" onclick="CanvasChangeSize(false)">-</span>
                <span style="margin: 4px; margin-left: 10px; cursor: pointer" onclick="CanvasChangeSize(true)">+</span>
            </span>
            Opacity:
            <input type="range" id="opacitiRanger" oninput="LabelPaintRange(this.value)" value="30" step="10" />
            <button id="btn-label-0" class="btn btn-outline-secondary" onclick="ChooseLabel(0)">Toprak</button>
            <button id="btn-label-1" class="btn btn-outline-success" onclick="ChooseLabel(1)">Kültür</button>
            <button id="btn-label-2" class="btn btn-outline-danger" onclick="ChooseLabel(2)">YabancıOt</button>
            <button id="btn-label-3" class="btn btn-outline-primary" onclick="ChooseLabel(3)">%50 Kültür+Yabancı</button>
            &nbsp;&nbsp;||&nbsp;&nbsp;
            <button class="btn btn-sm secBtn" onclick="ClearAllLabels()" style="background-color:black">Tümünü Temizle!</button>
        </td>
        <td style="vertical-align: bottom">
            <span style="border: solid 1px gray; border-radius: 2px; padding: 3px">
                <span style="margin: 4px; margin-right: 10px; cursor: pointer" onclick="ManvasChangeSize(false)">-</span>
                <span style="margin: 4px; margin-left: 10px; cursor: pointer" onclick="ManvasChangeSize(true)">+</span>
            </span>
        </td>
    </tr>
    <tr>
        <td>
            <canvas id="canvas"></canvas>
        </td>
        <td>
            <canvas id="manvas"></canvas>
        </td>
    </tr>
</table>


<script>
    
    // #region Definitions
    const canvas = document.getElementById("canvas");
    const ctx = canvas.getContext("2d");
    const manvas = document.getElementById("manvas");
    const mtx = manvas.getContext("2d");
    const image = new Image();
    image.src = $("#imagesrc").val();
    const imageID = Number($("#imageID").val());
    const filesCount = Number($("#filesCount").val());
    const naviScreen = $("#naviScreen");
    // #endregion

    // #region Classes
    class Point { X; Y; }

    class Rectangle {
        #width;
        #height;
        constructor(beginX, beginY, endX, endY) {
            let ifX = beginX < endX;
            let ifY = beginY < endY;
            this.beginX = ifX ? beginX : endX;
            this.endX = ifX ? endX : beginX;
            this.beginY = ifY ? beginY : endY;
            this.endY = ifY ? endY : beginY;
            this.#width = this.endX - this.beginX;
            this.#height = this.endY - this.beginY;

            // this part makes sure it is a SQUARE
            if (this.#width > this.#height) {
                this.endX = beginX + this.#height;
                this.#width = this.endX - this.beginX;
            }
            else {
                this.endY = beginY + this.#width;
                this.#height = this.endY - this.beginY;
            }

        }
        getWidth = () => this.#width;
        getHeight = () => this.#height;
    }

    class Label {        
        constructor(PhotoID, label, rectangle, _sizeFactor) {
            this.PhotoID = PhotoID;
            this.label = label;
            this.rectangle = rectangle;
            this.sizeFactor = _sizeFactor;
        }
        Stringify() {
            return JSON.stringify(this);
        }
        IsEqual(someLabel) {
            return JSON.stringify(someLabel) == JSON.stringify(this);
        }
    }
    // #endregion

    // #region Variables
    var imageNo = Number($("#imageNo").val());
    var seenBackend = $("#seenBackend").val();
    $("#seen").val(seenBackend).change();
    var oran = 1;
    var sizeFactor = 1;
    var canvasDesiredWidth = 1000;
    var manvasDesiredWidth = 600;
    var lineWidth = 2;
    var labelColors = ["black", "green", "red", "blue", "purple"];
    var choosenLabel = -1;
    var btnStyles = ["btn-secondary", "btn-success", "btn-danger", "btn-primary"];
    var btnOutStyles = ["btn-outline-secondary", "btn-outline-success", "btn-outline-danger", "btn-outline-primary"];
    var labelOpacity = 0.3;
    var labelList = [];
    var gridSystem = 0;
    var alpha = 0;
    const mouse = new Point();
    var kareDrawning;
    var kare = new Rectangle(0, 0, 1, 1);
    var manvasRectangle = new Rectangle(0, 0, manvasDesiredWidth, manvasDesiredWidth);
    var selectedLabelNo = -1;
    var driftingNow = false;
    // #endregion
    
    // #region INITIAL
    $(document).ready(function () {
        ReadEssentialCookies();

        if (gridSystem == 0) {
            ActivateFreeDrawingTrigers();
        }
        else {
            ActivateGridDrawingTrigers();
        }
    });

    image.onload = function () {
        CanvasInit();
        ArrangeSizeFactor();
        ManvasInit();
        PrintNaviScreen();
        UpdateAll();
    };

    function CanvasInit() {
        canvas.width = canvas.height = canvasDesiredWidth;
        ctx.fillStyle = "darkgray";
        ctx.fillRect(0, 0, canvas.width, canvas.height);
    }

    function ManvasInit() {
        manvas.width = manvas.height = manvasDesiredWidth;
        mtx.fillStyle = "darkgray";
        mtx.fillRect(0, 0, manvas.width, manvas.height);
    }

    function CanvasDrawImage() {
        if (image.height) {
            oran = image.width / image.height;
            canvas.width = canvasDesiredWidth;
            canvas.height = canvas.width / oran;
            ctx.drawImage(image, 0, 0, image.width, image.height, 0, 0, canvas.width, canvas.height);
        }
    }


    // #endregion

    // #region Navigation
    function NavigateBackward() {
        imageNo--;
        Number(imageNo).clamp(1, filesCount);
        GoToImageNo();
    }

    function NavigateForward() {
        imageNo++;
        Number(imageNo).clamp(1, filesCount);
        GoToImageNo();
    }
    function GoToImageNo() {
        window.location = "/Home/Index?_imageNo=" + imageNo;

    }
    function PrintNaviScreen() {
        naviScreen.html(imageNo + " / " + filesCount);
    }
    naviScreen.click(function () {
        var naviinput = $("<input>");
        naviinput.css({ "width": "5em", "border-radius": "0.4em" });
        naviinput.keyup(function (e) {
            if (e.keyCode == 13) {
                imageNo = naviinput.val();
                Number(imageNo).clamp(1, filesCount);
                GoToImageNo();
            }
        });
        $(this).parent().html(naviinput);
        naviinput.focus();
    });
    $("#seen").change(function () {
        window.location = "/Home/Index?_seen=" + $(this).val();
    });
    // #endregion

    // #region CookieReadWrite
    function ReadEssentialCookies() {
        gridSystem = Number(OzGetCookie("grid"));
        let btn = $("#btnGridSystem_" + gridSystem);
        btn.removeClass("btn-outline-dark");
        btn.addClass("btn-dark");


        // #TODO: options isimli cookie yok ise??
        // get options and apply
        let options = JSON.parse(OzGetCookie("options"));
        labelOpacity = options[0];
        $("#opacitiRanger").val(labelOpacity*100);
        canvasDesiredWidth = options[1];
        ArrangeSizeFactor();
        UpdateAll();
        manvasDesiredWidth = options[2];
    }
    
    function SaveGridSystem(gridSize) {
        OzSetCookie("grid", gridSize);
        window.location.reload(true);
    }
    function SaveAdjustmentOptions() {
        let options = JSON.stringify([labelOpacity, canvasDesiredWidth, manvasDesiredWidth]);
        OzSetCookie("options", options);
    }
    // #endregion

    // #region Keyboard&Intervals

    document.addEventListener("keyup", function (e) {

        switch (e.keyCode) {
            case 46: // delete
                if (selectedLabelNo != -1) {
                    labelList.splice(selectedLabelNo, 1);
                    selectedLabelNo = -1;
                    UpdateAll();
                }

                break;
        }
    });

    setInterval(function () {
        ChangeSelectedRectAlpha();
    }, 100);
    // #endregion

    // #region Adjustment Tools
    function CanvasChangeSize(increase) {
        increase = increase ? 50 : -50;
        canvasDesiredWidth = canvasDesiredWidth > 200 ?
            canvasDesiredWidth + increase : canvasDesiredWidth;
        ArrangeSizeFactor();
        SaveAdjustmentOptions();
        UpdateAll();
    }
    function ManvasChangeSize(increase) {
        increase = increase ? 50 : -50;
        manvasDesiredWidth = manvasDesiredWidth> 200 ?
            manvasDesiredWidth + increase : manvasDesiredWidth;
        SaveAdjustmentOptions();
        UpdateManvas(manvasRectangle);
    }
    function LabelPaintRange(value) {
        labelOpacity = value / 100;
        SaveAdjustmentOptions();
        UpdateAll();
    }

    // #endregion

    // #region Choose Label
    function ChooseLabel(choice) {
        choosenLabel = choice;
        for (var i = 0; i < btnStyles.length; i++) {
            $("#btn-label-" + i).removeClass(btnStyles[i]);
            $("#btn-label-" + i).removeClass(btnOutStyles[i]);

            if (choice == i) {
                $("#btn-label-" + i).addClass(btnStyles[i]);
            }
            else {
                $("#btn-label-" + i).addClass(btnOutStyles[i]);
            }
        }
    }
    // #endregion

    // #region CrossHair
    function CrossHair() {
        ctx.strokeStyle = "white";
        ctx.lineWidth = 2;
        ctx.globalAlpha = 0.4;

        // vertical line
        ctx.moveTo(mouse.X, 0);
        ctx.lineTo(mouse.X,canvas.height);
        ctx.stroke();
        // horizontal line
        ctx.moveTo(0, mouse.Y);
        ctx.lineTo(canvas.width, mouse.Y);
        ctx.stroke();
        ctx.globalAlpha = 1.0;
    }
    // #endregion

    // #region FreeDrawing
    
    function DefineselectedLabelNo() {
        selectedLabelNo = -1;
        for (var i = 0; i < labelList.length; i++) {
            let label = labelList[i];
            let x0 = label.rectangle.beginX;
            let x1 = label.rectangle.endX;
            let y0 = label.rectangle.beginY;
            let y1 = label.rectangle.endY;

            if (mouse.X >= x0 &
                mouse.X <= x1 &
                mouse.Y >= y0 &
                mouse.Y <= y1)
            {
                selectedLabelNo = i;
                driftingNow = true;
                UpdateManvas(label.rectangle);
            }
        }
    }

    function ActivateFreeDrawingTrigers() {

        canvas.addEventListener("contextmenu", function (e) {
            e.preventDefault();
        });

        canvas.addEventListener("mousedown", function (e) {
            selectedLabelNo = -1;
            driftingNow = false;

            switch (e.button ) {
                case 0:
                    if (choosenLabel == -1) {
                        alert("Sınıf seçiniz!");
                        return;
                    }
                    kare = new Rectangle(mouse.X, mouse.Y, mouse.X, mouse.Y);
                    kareDrawning = true;
                    break;
                case 1:
                    break;
                case 2:
                    DefineselectedLabelNo();
                    break;
            }
        });

        canvas.addEventListener("mousemove", function (e) {
            mouse.X = e.offsetX;
            mouse.Y = e.offsetY;
            
            
            if (kareDrawning) {
                kare = new Rectangle(kare.beginX, kare.beginY, mouse.X, mouse.Y);
                UpdateManvas(kare);
            }

            if(driftingNow)
                if (selectedLabelNo != -1) {
                    if (labelList[selectedLabelNo].rectangle.beginX + e.movementX >= 0 &
                        labelList[selectedLabelNo].rectangle.endX + e.movementX <= canvas.width)
                    {
                        labelList[selectedLabelNo].rectangle.beginX += e.movementX;
                        labelList[selectedLabelNo].rectangle.endX += e.movementX;
                    }
                    if (labelList[selectedLabelNo].rectangle.beginY + e.movementY >= 0 &
                        labelList[selectedLabelNo].rectangle.endY + e.movementY <= canvas.height)
                    {
                        labelList[selectedLabelNo].rectangle.beginY += e.movementY;
                        labelList[selectedLabelNo].rectangle.endY += e.movementY;
                    }
                    UpdateManvas(labelList[selectedLabelNo].rectangle);
                }
            UpdateAll();
        });

        canvas.addEventListener("mouseup", function (e) {
            switch (e.button) {
                case 0:
                    kareDrawning = false;
                    if (kare.getWidth() > 40)
                        labelList.push(new Label(imageID, choosenLabel, kare, sizeFactor));
                    break;
                case 1:
                    break;
                case 2:
                    driftingNow = false;
                    break;
            }
            UpdateAll();
        });
    }
    
    function DrawKare() {
        if (kareDrawning) {
            ctx.lineWidth = 4;
            ctx.strokeStyle = labelColors[choosenLabel];
            ctx.beginPath();
            ctx.rect(kare.beginX, kare.beginY, kare.getWidth(), kare.getHeight());            
            ctx.stroke();
        }
    }

    function DrawRectangles() {
        if (labelList.length == 0)
            return;

        ctx.lineWidth = 4;

        for (var i = 0; i < labelList.length; i++) {
            let r = labelList[i].rectangle;
            ctx.beginPath();
            ctx.rect(r.beginX, r.beginY, r.getWidth(), r.getHeight());
            if(selectedLabelNo == i)
                ctx.globalAlpha = labelOpacity - alpha;
            else
                ctx.globalAlpha = labelOpacity;
            ctx.fillStyle = labelColors[labelList[i].label];
            ctx.fill();
            ctx.globalAlpha = 1.0;
            ctx.strokeStyle = labelColors[labelList[i].label];
            ctx.stroke();
        }
    }

    function ChangeSelectedRectAlpha() {
        if (selectedLabelNo != -1) {
            alpha += 0.03;
            alpha = alpha > labelOpacity ? 0 : alpha;
                
            UpdateAll();
        }
        else
            alpha = 0;
    }

    // #endregion

    // #region GridDrawing
    function ActivateGridDrawingTrigers() {
        canvas.addEventListener("mousedown", function (e) {
            mouse.X = e.offsetX;
            mouse.Y = e.offsetY;
            // ...
            alert("grid sistemi yapım aşamasındadır :'( ");

            UpdateAll();
        });
    }
    var selectedGrid;
    function DrawGrids() {

        let gridCountX = Math.floor(image.width / gridSystem);
        let gridCountY = Math.floor(image.height / gridSystem);
        cgridSize = gridSystem / sizeFactor;
        // vertical lines
        for (var i = 0; i <= gridCountX; i++) {
            ctx.moveTo(i * cgridSize , 0);
            ctx.lineTo(i * cgridSize, gridCountY * cgridSize );
            ctx.stroke();
        }
        // horizontal lines
        for (var i = 0; i <= gridCountY; i++) {
            ctx.moveTo(0, i * cgridSize );
            ctx.lineTo(gridCountX * cgridSize , i * cgridSize );
            ctx.stroke();
        }
    }

    function PaintSelected() {
        if (selectedGrid == null)
            return;

        // ...
    }
    function PaintGrids() {
        // ...
    }

    // #endregion


    // #region Common Functions
    function UpdateAll() {
        CanvasDrawImage();
        if (gridSystem == 0) {
            CrossHair();
            DrawRectangles();
            DrawKare();
        }
        else {
            DrawGrids();
            PaintSelected();
            PaintGrids();
        }
    }

    function ArrangeSizeFactor() {
        sizeFactor = image.width / canvasDesiredWidth;
    }

    function UpdateManvas(rect_like) {
        let mb = manvasRectangle = rect_like;
        
        if (image.height) {
            manvas.width = manvasDesiredWidth;
            manvas.height = manvasDesiredWidth;
            mtx.drawImage(image,
                Math.floor(mb.beginX * sizeFactor),
                Math.floor(mb.beginY * sizeFactor),
                Math.floor(mb.getWidth() * sizeFactor),
                Math.floor(mb.getHeight() * sizeFactor),
                0, 0, manvas.width, manvas.height);
        }
    }

    function ClearAllLabels() {
        labelList = [];
        UpdateAll();
        ManvasInit();
    }

    // #endregion

</script>
