@{
    ViewData["Title"] = "Home Page";
}

@section Styles {
    <style>
        .secBtn {
            color: white;
        }
            .secBtn:hover {
                color: white !important;
            }
    </style>
}
<input type="hidden" id="imagesrc" value="@ViewBag.path"/>
<input type="hidden" id="seenBackend" value="@ViewBag.seen" />
<input type="hidden" id="imageID" value="@ViewBag.imageID" />
<input type="hidden" id="filesCount" value="@ViewBag.filesCount" />
<input type="hidden" id="imageNo" value="@ViewBag.imageNo" />

@if (!string.IsNullOrWhiteSpace(ViewBag.hata))
{
    <span class="text-danger">HATA: @ViewBag.hata</span>
}
<table class="table-sm table-borderless" style="width:100%">
    <tr>
        <td colspan="2" style="border-bottom:1px gray solid; padding-bottom:18px">
            <span>
                <span id="naviScreen" style="cursor:pointer" class="p-2"></span>
            </span>
            <button class="btn btn-sm btn-secondary" onclick="NavigateBackward()"><< Geri</button>
            <button class="btn btn-sm btn-secondary" onclick="NavigateForward()">İleri >></button>
            <span class="p-2">
                <select id="seen" class="form-control-sm">
                    <option value="0">İşlenmemişler</option>
                    <option value="1">İşlenmişler</option>
                    <option value="2">Tamamı</option>
                </select>
            </span>
            <span class="p-2"> || </span>
            <button class="btn btn-sm btn-success" onclick="Completed()"> Etiketleri Kaydet </button>
            <span class="p-2"> || </span>
            <button class="btn btn-sm btn-outline-danger" onclick="DeletePhoto()"> Resmi Sil </button>
        </td>
    </tr>
    <tr>
        <td colspan="2" style="padding-top:18px">
            <button id="btn-label-0" class="btn btn-outline-secondary" onclick="ChooseLabel(0)">Toprak</button>
            <button id="btn-label-1" class="btn btn-outline-success" onclick="ChooseLabel(1)">Kültür</button>
            <button id="btn-label-2" class="btn btn-outline-danger" onclick="ChooseLabel(2)">YabancıOt</button>
            <button id="btn-label-3" class="btn btn-outline-primary" onclick="ChooseLabel(3)">%50 Kültür+Yabancı</button>
            &nbsp;&nbsp;||&nbsp;&nbsp;
            <button class="btn btn-sm secBtn" onclick="ClearClasses()" style="background-color:black">Tümünü Temizle!</button>
        </td>
    </tr>
    <tr>
        <td style="vertical-align:top">
            <div style="margin: 2px">
                <span style="border: solid 1px gray; border-radius: 2px; padding: 3px">
                    <span style="margin: 4px; margin-right: 10px; cursor: pointer" onclick="CanvasChangeSize(false)">-</span>
                    <span style="margin: 4px; margin-left: 10px; cursor: pointer" onclick="CanvasChangeSize(true)">+</span>
                </span>
                <span class="ml-4">
                    Opacity:
                    <input type="range" oninput="LabelPaintRange(this.value)" value="30" step="10" />
                </span>
                <span class="ml-4">
                    Grid:
                    <span class="btn-group-sm">
                        <button id="btnGridSystem_0" onclick="CreateGridSystem(0)"  class="btn btn-outline-dark">FreeDraw</button>
                        -
                        <button id="btnGridSystem_128" onclick="CreateGridSystem(128)" class="btn btn-outline-dark">#128</button>
                        <button id="btnGridSystem_320" onclick="CreateGridSystem(320)"  class="btn btn-outline-dark">#320</button>
                        <button id="btnGridSystem_640" onclick="CreateGridSystem(640)"  class="btn btn-outline-dark">#640</button>
                        <button id="btnGridSystem_1280" onclick="CreateGridSystem(1280)"  class="btn btn-outline-dark">#1280</button>
                    </span>
                </span>
            </div>
            <span>
                <canvas id="canvas"></canvas>
            </span>
        </td>
        <td style="vertical-align:top;">
            <div style="margin: 2px">
                <span style="border: solid 1px gray; border-radius: 2px; padding: 3px">
                    <span style="margin: 4px; margin-right: 10px; cursor: pointer" onclick="FlyingCanvasChangeSize(false)">-</span>
                    <span style="margin: 4px; margin-left: 10px; cursor: pointer" onclick="FlyingCanvasChangeSize(true)">+</span>
                </span>
            </div>
            <span>
                <canvas id="manvas"></canvas>
            </span>
        </td>
    </tr>
</table>


<script>

    // #region Definitions
    const canvas = document.getElementById("canvas");
    const ctx = canvas.getContext("2d");
    const manvas = document.getElementById("manvas");
    const ctxm = manvas.getContext("2d");
    const image = new Image();
    image.src = $("#imagesrc").val();
    const imageID = Number($("#imageID").val());
    const filesCount = Number($("#filesCount").val());
    const naviScreen = $("#naviScreen");
    // #endregion

    // #region Classes
    class Point { X; Y; }

    class Rectangle {
        #width;
        #height;
        constructor(beginX, beginY, endX, endY) {
            let ifX = beginX < endX;
            let ifY = beginY < endY;
            this.beginX = ifX ? beginX : endX;
            this.endX = ifX ? endX : beginX;
            this.beginY = ifY ? beginY : endY;
            this.endY = ifY ? endY : beginY;
            this.#width = this.endX - this.beginX;
            this.#height = this.endY - this.beginY;

            // this part makes sure it is a SQUARE
            if (this.#width > this.#height) {
                this.endX = beginX + this.#height;
                this.#width = this.endX - this.beginX;
            }
            else {
                this.endY = beginY + this.#width;
                this.#height = this.endY - this.beginY;
            }

        }
        getWidth = () => this.#width;
        getHeight = () => this.#height;
    }

    class Label {        
        constructor(PhotoID, label, rectangle) {
            this.PhotoID = PhotoID;
            this.label = label;
            this.rectangle = rectangle;
        }
        Stringify() {
            return JSON.stringify(this);
        }
        IsEqual(someLabel) {
            return JSON.stringify(someLabel) == JSON.stringify(this);
        }
    }
    // #endregion

    // #region Variables
    var imageNo = Number($("#imageNo").val());
    var seenBackend = $("#seenBackend").val();
    $("#seen").val(seenBackend).change();
    var oran = 1;
    var canvasDesiredWidth = 1000;
    var manvasDesiredWidth = 600;
    var lineWidth = 2;
    var labelColors = ["black", "green", "red", "blue", "purple"];
    var choosenLabel = -1;
    var btnStyles = ["btn-secondary", "btn-success", "btn-danger", "btn-primary"];
    var btnOutStyles = ["btn-outline-secondary", "btn-outline-success", "btn-outline-danger", "btn-outline-primary"];
    var labelOpacity = 0.3;
    var labelList = [];
    var gridSystem = 0;
    const mouse = new Point();
    var kareDrawning;
    var kare = new Rectangle(0, 0, 1, 1);
    // #endregion
    
    // #region INITIAL
    $(document).ready(function () {
        ReadEssentialCookies();

        if (gridSystem == 0) {
            ActivateFreeDrawingTrigers();
        }
        else {
            ActivateGridDrawingTrigers();
        }
    });

    image.onload = function () {
        CanvasesInit();
        PrintNaviScreen();
        UpdateAll();
    };

    function CanvasesInit() {
        canvas.width = canvas.height = canvasDesiredWidth;
        manvas.width = manvas.height = manvasDesiredWidth;
        ctx.fillStyle = "darkgray";
        ctxm.fillStyle = "darkgray";
        ctx.fillRect(0, 0, canvas.width, canvas.height);
        ctxm.fillRect(0, 0, manvas.width, manvas.height);
    }
    function CanvasDrawImage() {
        if (image.height) {
            oran = image.width / image.height;
            canvas.width = image.width;
            canvas.height = canvas.width / oran;
            ctx.drawImage(image, 0, 0, canvas.width, canvas.height, 0, 0, image.width, image.height);
        }
    }
    
    // #endregion

    // #region Navigation
    function NavigateBackward() {
        imageNo--;
        Number(imageNo).clamp(1, filesCount);
        GoToImageNo();
    }

    function NavigateForward() {
        imageNo++;
        Number(imageNo).clamp(1, filesCount);
        GoToImageNo();
    }
    function GoToImageNo() {
        window.location = "/Home/Index?_imageNo=" + imageNo;

    }
    function PrintNaviScreen() {
        naviScreen.html(imageNo + " / " + filesCount);
    }
    naviScreen.click(function () {
        var naviinput = $("<input>");
        naviinput.css({ "width": "5em", "border-radius": "0.4em" });
        naviinput.keyup(function (e) {
            if (e.keyCode == 13) {
                imageNo = naviinput.val();
                Number(imageNo).clamp(1, filesCount);
                GoToImageNo();
            }
        });
        $(this).parent().html(naviinput);
        naviinput.focus();
    });
    $("#seen").change(function () {
        window.location = "/Home/Index?_seen=" + $(this).val();
    });
    // #endregion

    // #region Choose Label
    function ChooseLabel(choice) {
        choosenLabel = choice;
        for (var i = 0; i < btnStyles.length; i++) {
            $("#btn-label-" + i).removeClass(btnStyles[i]);
            $("#btn-label-" + i).removeClass(btnOutStyles[i]);

            if (choice == i) {
                $("#btn-label-" + i).addClass(btnStyles[i]);
            }
            else {
                $("#btn-label-" + i).addClass(btnOutStyles[i]);
            }
        }
    }
    // #endregion

    // #region CrossHair
    function CrossHair() {
        ctx.strokeStyle = "white";
        ctx.lineWidth = 2;
        ctx.globalAlpha = 0.4;

        // vertical line
        ctx.moveTo(mouse.X, 0);
        ctx.lineTo(mouse.X,canvas.height);
        ctx.stroke();
        // horizontal line
        ctx.moveTo(0, mouse.Y);
        ctx.lineTo(canvas.width, mouse.Y);
        ctx.stroke();
        ctx.globalAlpha = 1.0;
    }
    // #endregion

    // #region CookieReadWrite
    function ReadEssentialCookies() {
        gridSystem = Number(OzGetCookie("grid"));
        let btn = $("#btnGridSystem_" + gridSystem);
        btn.removeClass("btn-outline-dark");
        btn.addClass("btn-dark");
    }
    
    function CreateGridSystem(gridSize) {
        OzSetCookie("grid", gridSize);
        window.location.reload(true);
    }
    // #endregion

    // #region FreeDrawing
    function ActivateFreeDrawingTrigers() {

        canvas.addEventListener("mousedown", function () {
            if (choosenLabel == -1) {
                alert("Sınıf seçiniz!");
                return;
            }
            kare = new Rectangle(mouse.X, mouse.Y, mouse.X, mouse.Y);
            kareDrawning = true;

        });

        canvas.addEventListener("mousemove", function (e) {
            mouse.X = e.offsetX;
            mouse.Y = e.offsetY;
            if (kareDrawning) {
                kare = new Rectangle(kare.beginX, kare.beginY, mouse.X, mouse.Y);
            }
            UpdateAll();
        });

        canvas.addEventListener("mouseup", function () {
            kareDrawning = false;
            labelList.push(new Label(imageID, choosenLabel, kare));
        });
    }
    
    function DrawKare() {
        if (kareDrawning) {
            ctx.lineWidth = 4;
            ctx.strokeStyle = labelColors[choosenLabel];
            ctx.beginPath();
            ctx.rect(kare.beginX, kare.beginY, kare.getWidth(), kare.getHeight());            
            ctx.stroke();
        }
    }

    function DrawRectangles() {
        if (labelList.length == 0)
            return;

        ctx.lineWidth = 4;

        for (var i = 0; i < labelList.length; i++) {
            let r = labelList[i].rectangle;
            ctx.beginPath();
            ctx.rect(r.beginX, r.beginY, r.getWidth(), r.getHeight());
            ctx.globalAlpha = labelOpacity;
            ctx.fillStyle = labelColors[labelList[i].label];
            ctx.fill();
            ctx.globalAlpha = 1.0;
            ctx.strokeStyle = labelColors[labelList[i].label];
            ctx.stroke();
        }
    }
    // #endregion

    // #region GridDrawing
    function ActivateGridDrawingTrigers() {
        canvas.addEventListener("mousedown", function (e) {
            mouse.X = e.offsetX;
            mouse.Y = e.offsetY;
            // ...
            alert("grid sistemi yapım aşamasındadır :'( ");

            UpdateAll();
        });
    }
    var selectedGrid;
    function DrawGrids() {
        // ...
    }
    function PaintSelected() {
        if (selectedGrid == null)
            return;

        // ...
    }
    function PaintGrids() {
        // ...
    }

    // #endregion

    function UpdateAll() {
        CanvasDrawImage();
        if (gridSystem == 0) {
            CrossHair();
            DrawRectangles();
            DrawKare();
        }
        else {
            DrawGrids();
            PaintSelected();
            PaintGrids();
        }
    }




</script>

<!--


@*
    <script>

        var canvasDesiredWidth = 1000;
        var flyingCanvasDesiredWidth = 600;
        var lineWidth = 2;
        var Colors = ["black", "green", "red", "blue", "purple"]

        var imageNo = 0;
        var filesCount = 0;
        var seenorwhat = 0;
        var gridSize = 128;
        var secimler = [];
        var imageID = 0;
        var etiketPaintRange = 0.3;
        var cursor = { col: 0, row: 0 };

        $(document).ready(function () {
            filesCount = Number($("#filesCount").val());
            imageNo = Number($("#imageNo").val());
            imageID = Number($("#imageID").val());
            $("#seen").val($("#seenBackend").val());
            GetLabels();
        });

        function GetLabels() {
            new OzAjax("/Home/GetEtiketler", GET, { imageID: imageID }, GetEtBasari).Send();
            function GetEtBasari(data) {
                secimler = JSON.parse(data);
                PaintChosenGrids();
            }
        }

        //___CANVAS___//
        // Get image Info
        var image, imageWidth, imageHeight, gridCountX, gridCountY, cursorindex;
        // create canvas
        var canvas, ctx, percentage, cGridSize, flyingCanvas, ctx2;

        $("#image").on("load", function () {
            // Get image Info
            image = document.getElementById("image");
            imageWidth = image.width; // should be 1280
            imageHeight = image.height;
            gridCountX = Math.floor(imageWidth / gridSize);
            gridCountY = Math.floor(imageHeight / gridSize);

            cursorindex = 0;

            // create canvas
            canvas = document.getElementById("canvas");
            ctx = canvas.getContext("2d");
            percentage = imageWidth / imageHeight;
            canvas.width = canvasDesiredWidth;
            canvas.height = canvas.width / percentage;

            flyingCanvas = document.getElementById("flyingCanvas");
            ctx2 = flyingCanvas.getContext("2d");
            flyingCanvas.width = flyingCanvasDesiredWidth;
            flyingCanvas.height = flyingCanvasDesiredWidth;

            UpdateAll();
        });

        function UpdateAll() {
            DrawImage();
            DrawGrid();
            PaintChosenGrids();
            DrawRedRect();
            DrawFlyingImage();
        }

        function DrawImage() {
            ctx.drawImage(image, 0, 0, imageWidth, imageHeight, 0, 0, canvas.width, canvas.height);
        }
        function DrawGrid() {
            ctx.strokeStyle = "white";
            ctx.lineWidth = lineWidth;

            // fixing cGridSize value
            cGridSize = gridSize * (canvasDesiredWidth / imageWidth);

            // vertical lines
            for (var i = 0; i <= gridCountX; i++) {
                ctx.moveTo(i * cGridSize, 0);
                ctx.lineTo(i * cGridSize, gridCountY * cGridSize);
                ctx.stroke();
            }
            // horizontal lines
            for (var i = 0; i <= gridCountY; i++) {
                ctx.moveTo(0, i * cGridSize);
                ctx.lineTo(gridCountX * cGridSize, i * cGridSize);
                ctx.stroke();
            }
        }

        function PaintChosenGrids() {
            ctx.globalAlpha = etiketPaintRange;

            var x, y, w, h;
            for (var i = 0; i < secimler.length; i++) {

                ctx.fillStyle = Colors[secimler[i].choice];

                x = cGridSize * secimler[i].cursorCol;
                y = cGridSize * secimler[i].cursorRow;
                w = cGridSize;
                h = cGridSize;

                ctx.fillRect(x + 2, y + 2, w - 4, h - 4);
            }
            ctx.globalAlpha = 1.0;
        }

        function DrawRedRect() {
            ctx.lineWidth = 4;
            ctx.strokeStyle = "red";
            ctx.beginPath();
            ctx.rect(cursor.col * cGridSize, cursor.row * cGridSize, cGridSize, cGridSize);
            ctx.stroke();
        }

        function DrawFlyingImage() {
            ctx2.drawImage(image, cursor.col * gridSize, cursor.row * gridSize, gridSize, gridSize, 0, 0, flyingCanvas.width, flyingCanvas.height);
        }


        function CanvasChangeSize(increase) {
            if (increase)
                canvasDesiredWidth += 50;
            else
                canvasDesiredWidth -= 50;
            canvasDesiredWidth = canvasDesiredWidth < 200 ? 200 : canvasDesiredWidth;
            canvas.width = canvasDesiredWidth;
            canvas.height = canvas.width / percentage;
            UpdateAll();
        }
        function FlyingCanvasChangeSize(increase) {
            if (increase)
                flyingCanvasDesiredWidth += 50;
            else
                flyingCanvasDesiredWidth -= 50;
            flyingCanvasDesiredWidth = flyingCanvasDesiredWidth < 200 ? 200 : flyingCanvasDesiredWidth;
            flyingCanvas.width = flyingCanvasDesiredWidth;
            flyingCanvas.height = flyingCanvasDesiredWidth;
            DrawFlyingImage();
        }

        //___NAVIGATION___//
        function NavigateBackward() {
            console.log("imageNo" + imageNo);
            imageNo -= 1;
            if (imageNo < 1) {
                imageNo = 1;
                return;
            }
            console.log("yeni image index" + imageNo);
            window.location = "/Home/Index/" + imageNo;
        }

        function NavigateForward() {
            imageNo += 1;
            if (imageNo > filesCount) {
                imageNo = filesCount;
                return;
            }
            window.location = "/Home/Index/" + imageNo;
        }

        function CursorIncrease() {
            cursorindex = gridCountX * cursor.row + cursor.col;
            cursorindex++;
            if (cursorindex > gridCountX * gridCountY - 1)
                cursorindex = 0;

            cursor.row = Math.floor(cursorindex / gridCountX);
            cursor.col = cursorindex - (cursor.row * gridCountX);

            UpdateAll();
        }

        $("#canvas").click(function (e) {
            cursor.col = Math.floor(e.offsetX / cGridSize);
            cursor.row = Math.floor(e.offsetY / cGridSize);
            cursor.row = (cursor.row > gridCountY - 1) ? gridCountY - 1 : cursor.row;
            UpdateAll();
        });



        function ChooseLabel(choice) {
            var pack = { imageNo: imageNo, choice: choice, cursorCol: cursor.col, cursorRow: cursor.row };
            var packExist = false;
            for (var i = 0; i < secimler.length; i++)
                // pack zaten varsa sadece choice değerini değiştir.. array.push yapma!
                if (secimler[i].cursorCol == pack.cursorCol && secimler[i].cursorRow == pack.cursorRow) {
                    secimler[i].choice = pack.choice;
                    packExist = true;
                }

            if (!packExist) {
                secimler.push({ choice: choice, cursorCol: cursor.col, cursorRow: cursor.row, cursorSize: gridSize });
            }

            CursorIncrease();
        }

        function ClearClasses() {
            secimler = [];
            UpdateAll();
        }

        function Completed() {

            new OzAjax("/Home/Tamamlanan", POST, { secimler: secimler, imageID: imageID }, KaydetBasari, KaydetHata).Send();
            function KaydetBasari(data) {
                alert(data);
                NavigateForward();
            }
            function KaydetHata(error) {
                alert(error);
            }
        }


        $("#seenorwhat").change(function () {
            seenorwhat = $(this).val();
            window.location = "/Home/Index/" + imageNo + "?seenorwhat=" + seenorwhat;
        });

        function LabelPaintRange(value) {

            etiketPaintRange = value / 100.0;
            UpdateAll();
        }

        class Label {
            constructor(label, posX, posY, wid, hei, PhotoID) {
                this.label = label;
                this.posX = posX;
                this.posY = posY;
                this.wid = wid;
                this.hei = hei
                this.PhotoID = PhotoID;
            }
            Stringify() {
                return JSON.stringify(this);
            }
            IsEqual(someLabel) {
                return JSON.stringify(someLabel) == JSON.stringify(this);
            }
        }
        var label = new Label();

    </script>

*@
-->
