<style>
    .navigationPanel {
        padding: 5px;
        border-bottom: dotted 1px gray;
        width: 100%;
    }

    .btnNavi {
        border-radius: 3px 4px;
    }

    .naviScreen {
        cursor: pointer;
    }

    .naviScreenContainer {
        display: inline-block;
        width: 80px;
        text-align: center;
    }

    .naviInput {
        position: absolute;
        width: 80px;
        border-radius: 5px;
        z-index: 3;
    }

    .spnShape {
        border: solid white 1px;
        padding: 5px;
        cursor: pointer;
    }

        .spnShape:hover {
            border: solid black 1px;
        }

    .spnShapeSelected {
        border: solid black 1px;
    }

    .sizeBtn {
        border: none;
        padding-right: 8px;
        padding-left: 8px;
        cursor: pointer;
    }

    .sizeBtnBorder {
        text-align: center;
        margin-left: 10px;
        margin-right: 10px;
    }

    .mainDiv {
        position: absolute;
        top: 84px;
        bottom: 0;
        border-right: solid gray 1px;
        background-color: yellow;
    }

    .annoListDiv {
        position: absolute;
        width: 120px;
        top: 0;
        
        border-right: solid gray 1px;
        text-align: center;
    }

    .annoBtn {
        width: 80%;
        border: solid 1px;
        border-radius: 5px;
        margin-top: 0.4em;
        margin-bottom: 0.4em;
    }

    .canvasDiv {
        position: absolute;
        top: 0px;
        left: 120px;
        min-height:200vh;
    }
    #canvas {
        position: absolute;
        top: 5px;
        left: 5px;
    }
    #manvas {
        position: absolute;
        top: 5px;
        left: 5px;
    }
</style>

<input type="hidden" id="projectID" value="@ViewBag.projectID" />
<div class="navigationPanel" id="navigationPanel">
    <select class="form-select-sm" id="project" onchange="ChangeProject()">
        <option style="color:gray; font-style:italic">Proje Seçiniz...</option>
    </select>
    <span class="naviScreenContainer" id="naviScreenContainer">
        <span id="naviScreen" class="naviScreen" onclick="ShowNaviInput()">
            0/0
        </span>
    </span>
    <button class="btnNavi" onclick="ClickNavigate(false)">< önceki</button>
    <button class="btnNavi" onclick="ClickNavigate(true)">sonraki ></button>
    <select id="seen" class="form-control-sm" onchange="ChangeSeen()">
        <option value="1">İşlenmemişler</option>
        <option value="2">İşlenmişler</option>
        <option value="3">Tamamı</option>
    </select>
    <button class="btn btn-sm btn-outline-danger" onclick="DeletePhoto()"> Resmi Sil </button>
    <button class="btn btn-outline-success" id="completedBtn" onclick="Completed()">Değişiklikleri Kaydet</button>
    &nbsp;&nbsp;&nbsp;&nbsp;

    <span class="spnShape" onclick="ClickShape(this)" data-shape="0"><img src="~/sysimg/square.png" height="24" /></span>
    <span class="spnShape" onclick="ClickShape(this)" data-shape="1"><img src="~/sysimg/rect.png" height="24" /></span>
    <span class="spnShape" onclick="ClickShape(this)" data-shape="2"><img src="~/sysimg/circle.png" height="24" /></span>
    <span class="spnShape" onclick="ClickShape(this)" data-shape="3"><img src="~/sysimg/poligon.png" height="24" /></span>
    &nbsp;&nbsp;&nbsp;&nbsp;
    <span class="sizeBtnBorder">
        <button class="sizeBtn" onclick="ChangeCSize(false)">-</button>
        <span id="csize" style="background-color:rgb(220,220,220)"></span>
        <button class="sizeBtn" onclick="ChangeCSize(true)">+</button>
    </span>
    <label>
        CrossHair
        <input type="checkbox" id="crossHair" onclick="ClickCrossHair()" />
    </label>
    <button onclick="WriteListToConsole()">Listeyi Göster</button>
</div>

<div class="mainDiv">
    <div class="annoListDiv">
        <u>Sınıflar</u>
        <div id="annoListDiv"></div>
    </div>
    <div class="canvasDiv">
        <div id="error" class="text-bg-danger"></div>
        <canvas id="canvas"></canvas>
        <canvas id="manvas"></canvas>
    </div>
</div>



<script>

    // #region Classes
    class Preferences {
        seen = 3;
        shape = 0;
        csize = 1000;
        crossHair = true;
        selectedAnno = -1;
    }
    class NavigateViewModel {
        projectID;
        seen;
        imageNo;
        //-------
        filesCount;
        path;
        error;
        //-------
        imageID;
    }
    class Label {
        id;
        projectID;
        photoID;
        annoID;
        points = [];
        shape;
        sizeFactor;
    }
    class Point {
        constructor(x, y) {
            this.x = x;
            this.y = y;
        }
    }
    class Rectangle {
        #width;
        #height;
        constructor(beginX, beginY, endX, endY, isSquare) {
            let ifX = beginX < endX;
            let ifY = beginY < endY;
            this.beginX = ifX ? beginX : endX;
            this.endX = ifX ? endX : beginX;
            this.beginY = ifY ? beginY : endY;
            this.endY = ifY ? endY : beginY;
            this.#width = this.endX - this.beginX;
            this.#height = this.endY - this.beginY;
            this.isSquare = isSquare;

            if (isSquare) {
                if (this.#width > this.#height) {
                    this.endX = beginX + this.#height;
                    this.#width = this.endX - this.beginX;
                }
                else {
                    this.endY = beginY + this.#width;
                    this.#height = this.endY - this.beginY;
                }
            }
        }
        getWidth = () => this.#width;
        getHeight = () => this.#height;

    }
    Rectangle.prototype.GetPoints = function () {
        let pointsOfRect = [];
        pointsOfRect.push(new Point(this.beginX, this.beginY));
        pointsOfRect.push(new Point(this.endX, this.beginY));
        pointsOfRect.push(new Point(this.endX, this.endY));
        pointsOfRect.push(new Point(this.beginX, this.endY));
        return pointsOfRect;
    }

    var preferences = new Preferences();
    var navi = new NavigateViewModel();
    var labelList = [];
    var currentLabel = null;
    const mouse = new Point();
    var rect = new Rectangle();

    // #endregion

    var projectList = [];
    var annoList = [];
    var colorList = [];

    const canvas = document.getElementById("canvas");
    const ctx = canvas.getContext("2d");
    const manvas = document.getElementById("manvas");
    const mtx = manvas.getContext("2d");
    var image = new Image();
    var selectedLabel = -1;

    $(document).ready(function () {
        InitPreferences();
        UpdatePreferences();
        InitNavigation();
        StartAjaxChain();
    });
    function StartAjaxChain() {
        GetProjectList(); // =>
    }

    // #region Init&Update Preferences
    function InitPreferences() {
        let p = OzGetCookie("preferences");
        if (p == "") SavePreferences();
        else preferences = JSON.parse(p);
        preferences.selectedAnno = -1;
    }

    function SavePreferences() {
        OzSetCookie("preferences", JSON.stringify(preferences));
    }

    function UpdatePreferences() {
        UpdateSeen();
        UpdateShape();
        UpdateCSize();
        UpdateCrossHair();
    }

    function UpdateSeen() {
        let seen = Number(preferences.seen);
        $("#seen").val(seen);
    }

    function UpdateShape() {
        let shape = preferences.shape;
        $(".spnShape").removeClass("spnShapeSelected");
        $("*[data-shape=" + shape + "]").addClass("spnShapeSelected");
    }

    function UpdateCSize() {
        let csize = preferences.csize;
        $("#csize").html(csize + "px");
    }
    function UpdateCrossHair() {
        let crossHair = preferences.crossHair;
        $("#crossHair").prop("checked", crossHair);
    }

    // #endregion

    // #region onClick & onChange

    function ChangeProject() {
        let project = Number($("#project").val());
        navi.projectID = project;
        if (navi.projectID != 0)
            $("#error").html("");
        StartAjaxChain();
    }

    function ClickNavigate(increase) {
        if (increase) {
            if (navi.imageNo < navi.filesCount) {
                navi.imageNo++;
                GetImage();
            }
        }
        else {
            if (navi.imageNo > 1) {
                navi.imageNo--;
                GetImage();
            }
        }
    }

    function ChangeSeen() {
        let seen = Number($("#seen").val());
        preferences.seen = seen;
        SavePreferences();
        navi.seen = seen;
        navi.imageNo = 1;
        GetImage();
    }
    

    function Completed() {

        MakeLabelListValuesInteger();

        new OzAjax("/Home/SetLabels", POST, { labelListJson: JSON.stringify(labelList) }, CompletedSuccess).Send();
        function CompletedSuccess(data) {
            data = JSON.parse(data);
            if (data == "ok") {
                let oldHtml = $("#completedBtn").html();
                $("#completedBtn").html("Kaydedildi.")
                setTimeout(function () { $("#completedBtn").html(oldHtml) }, 1000);
            }
            else {
                HataYaz(data);
            }
        }
    }

    function ClickShape(dom) {
        let shape = Number($(dom).data("shape"));
        preferences.shape = shape;
        SavePreferences();
        UpdateShape();
    }

    function ChangeCSize(increase) {
        if (increase) {
            preferences.csize += 50;
        }
        else {
            preferences.csize -= 50;
        }
        SavePreferences();
        UpdateCSize();
        UpdateCanvas();
        ResizeLabelList()
        UpdateManvas();
    }

    function ClickCrossHair() {
        preferences.crossHair = $("#crossHair").prop("checked");
        SavePreferences();
    }

    function MakeLabelListValuesInteger() {
        for (var j = 0; j < labelList.length; j++) {
            for (var i = 0; i < labelList[j].points.length; i++) {
                labelList[j].points[i].x = Math.floor(labelList[j].points[i].x);
                labelList[j].points[i].y = Math.floor(labelList[j].points[i].y);
            }
            //labelList[j].sizeFactor = Math.floor(labelList[j].sizeFactor)
        }
    }

    // #endregion

    // #region Navigation

    function InitNavigation() {
        navi.projectID = Number($("#projectID").val());
        if (navi.projectID == 0) {
            $("#error").html("Bir proje seçiniz.");
        }
        navi.seen = preferences.seen;
    }
    function ShowNaviInput() {
        if (navi.filesCount < 1)
            return;
        let p = $("#naviScreenContainer").position();
        let input = $("<input>");
        input.addClass("naviInput");
        input.attr("id", "naviInput");
        $("body").append(input);
        input.css({ "position": "absolute", "top": p.top + "px", "left": p.left + "px" });
        input.focus();
        input.keyup(function (e) {
            if (e.keyCode == 13) {
                NaviGoTo(Number($(this).val()));
            }
        });
    }
    function NaviGoTo(value) {
        navi.imageNo = value;
        navi.imageNo = Number(navi.imageNo).clamp(1, navi.filesCount);
        GetImage();
        $("#naviInput").remove();
    }

    // #endregion

    // #region Ajax Chain

    function GetProjectList() {
        new OzAjax("/Home/GetProjectList", GET, { projectID: navi.projectID }, ProjectListSuccess).Send();
        function ProjectListSuccess(data) {
            projectList = JSON.parse(data);
            UpdateProjects(); //=>
        }
    }
    function UpdateProjects() {

        let project = $("#project");
        let firstChild = $("#project").children().first();
        project.html(firstChild);

        for (var i = 0; i < projectList.length; i++) {
            let option = new Option(projectList[i].name, projectList[i].id);

            let optionIsSelected = navi.projectID == projectList[i].id;
            option.selected = optionIsSelected;

            if (optionIsSelected) {
                annoList = projectList[i].annoList;
                PlaceAnnoList(); // =>
                GetImage(); // =>
            }

            project.append(option);
        }
    }
    function PlaceAnnoList() {
        let annoListDiv = $("#annoListDiv");
        annoListDiv.html("");
        for (var i = 0; i < annoList.length; i++) {
            let btn = $("<button>");
            btn.html(annoList[i].name);
            btn.addClass("annoBtn");
            btn.data("annoid", i);
            btn.data("color", annoList[i].color);
            btn.data("textcolor", annoList[i].textColor);
            colorList.push(annoList[i].color);
            btn.click(SelectAnno);

            annoListDiv.append(btn);
        }
        PaintAnnoBtns(); // =>
    }

    function SelectAnno() {
        preferences.selectedAnno = Number($(this).data("annoid"));
        SavePreferences();
        PaintAnnoBtns();
    }

    function PaintAnnoBtns() {
        $(".annoBtn").each(function (i, e) {
            if (i == preferences.selectedAnno) {
                let color = $(e).data("color");
                let textColor = $(e).data("textcolor");
                $(e).css({
                    "color": textColor,
                    "background-color": color,
                });
            }
            else {
                let color = $(e).data("color");
                $(e).css({
                    "color": color,
                    "background-color": "white"
                });
            }
        });
    }

    function GetImage() {
        new OzAjax("/Home/GetImage", POST, { navi: navi }, Success).Send();
        function Success(data) {
            navi = JSON.parse(data);
            if (navi.error != "") {
                HataYaz(navi.error);
            }
            else {
                $("#error").html("");
            }
            UpdateNaviScreen();
            DrawCanvas();
            selectedLabel = -1;
            ClearCurrentLabel();
            FillLabelList();
        }
    }

    function UpdateNaviScreen() {
        let imageNo = navi.imageNo;
        let filesCount = navi.filesCount;
        $("#naviScreen").html(imageNo + "/" + filesCount);
    }
    function DrawCanvas() {
        image.src = navi.path;
        image.addEventListener("load", UpdateCanvas);
        image.addEventListener("error", HataYaz);
    }
    function UpdateCanvas() {
        if (image.width > 0) {
            let oran = image.width / image.height;
            canvas.width = preferences.csize;
            canvas.height = canvas.width / oran;
            ctx.drawImage(image, 0, 0, image.width, image.height, 0, 0, canvas.width, canvas.height);

            manvas.width = canvas.width;
            manvas.height = canvas.height;
        }
    }

    function FillLabelList() {
        labelList = [];
        new OzAjax("/Home/GetLabels", GET, { photoID: navi.imageID }, GetLabelsSuccess).Send();
        function GetLabelsSuccess(data) {
            labelList = JSON.parse(data);
            UpdateManvas();
        }
    }

    function HataYaz(hata) {
        canvas.width = preferences.csize;
        canvas.height = preferences.csize;
        ctx.clearRect(0, 0, preferences.csize, preferences.csize);
        $("#error").html(hata ?? "Bir hata oluştu!");
    }

    // #endregion

    // #region MANVAS

    var mouseEntered = false;
    var drawing = false;
    var pulling = false;
    
    //// TRIGERS ////

    manvas.addEventListener("contextmenu", function (e) {
        e.preventDefault();
    });

    manvas.addEventListener("mouseenter", function (e) {
        mouseEntered = true;
    });

    manvas.addEventListener("mouseleave", function (e) {
        mouseEntered = false;
        mouseButton = -1;
        UpdateManvas(); // crossHair'ı kaldırsın.
    });

    manvas.addEventListener("mousedown", function (e) {
        switch (e.button) {
            case 0:
                if (preferences.selectedAnno == -1) {
                    alert("Sınıf seçiniz!");
                    return;
                }
                InitCurrentLabel();
                drawing = true;
                break;
            case 1:
                break;
            case 2:
                SelectLabel();
                UpdateManvas();                
                if (selectedLabel != -1)
                    pulling = true;
                break;
        }
    });

    manvas.addEventListener("mouseup", function (e) {
        switch (e.button) {
            case 0:                
                // currentLabel'ı listeye aktar ve boşalt
                // TODO: belirli alanın üzerindeyse push yapılacak!
                drawing = false;
                labelList.push(currentLabel);
                ClearCurrentLabel();
                break;
            case 1:
                break;
            case 2:
                pulling = false;
                break;
        }
    });

    manvas.addEventListener("mousemove", function (e) {
        mouse.x = e.offsetX;
        mouse.y = e.offsetY;

        if (drawing) {
            let firstPoint = currentLabel.points[0];
            switch (preferences.shape) {
                case 0:
                    rect = new Rectangle(firstPoint.x, firstPoint.y, mouse.x, mouse.y, true);
                    currentLabel.points = rect.GetPoints();
                    break;
                case 1:
                    rect = new Rectangle(firstPoint.x, firstPoint.y, mouse.x, mouse.y, false);
                    currentLabel.points = rect.GetPoints();
                    break;
                case 2:
                    break;
                case 3:
                    break;
            }
        }
        else if (pulling)
            MoveLabel(e.movementX, e.movementY);

        UpdateManvas();
    });

    function UpdateManvas() {
        ClearManvas();
        CrossHair();
        DrawLabels();
        DrawCurrentLabel();
    }

    function DrawCurrentLabel() {
        if (!drawing)
            return;
        
        mtx.beginPath();

        let firstPoint = currentLabel.points[0];
        mtx.moveTo(firstPoint.x, firstPoint.y);

        for (var i = 1; i < currentLabel.points.length; i++) {
            let p = currentLabel.points[i];
            mtx.lineTo(p.x, p.y);
        }
        mtx.closePath();

        mtx.globalAlpha = 0.1;
        mtx.fillStyle = colorList[preferences.selectedAnno];
        mtx.fill();
        mtx.globalAlpha = 1.0;
        mtx.strokeStyle = colorList[preferences.selectedAnno];
        mtx.lineWidth = 5;
        mtx.stroke();
    }
    function DrawLabels() {
        if (labelList.length < 1)
            return;

        for (var j = 0; j < labelList.length; j++) {

            let label = labelList[j];
            
            mtx.beginPath();
            let firstPoint = label.points[0];
            mtx.moveTo(firstPoint.x, firstPoint.y);
            for (var i = 1; i < label.points.length; i++) {
                let p = label.points[i];
                mtx.lineTo(p.x, p.y);
            }
            mtx.closePath();
            mtx.globalAlpha = 0.2;
            if (selectedLabel == j) {
                mtx.globalAlpha = 0.1;
            }
            mtx.fillStyle = colorList[label.annoID];
            mtx.fill();
            mtx.globalAlpha = 1.0;
            mtx.strokeStyle = colorList[label.annoID];
            mtx.lineWidth = 2;
            if (selectedLabel == j) {                
                mtx.lineWidth = 5;
            }
            mtx.stroke();
        }
    }
    function InitCurrentLabel() {
        currentLabel = new Label();
        currentLabel.shape = preferences.shape;
        currentLabel.annoID = preferences.selectedAnno;
        currentLabel.sizeFactor = image.width / preferences.csize;
        currentLabel.photoID = navi.imageID;
        currentLabel.projectID = navi.projectID;
        switch (preferences.shape) {
            case 0:
                rect = new Rectangle(mouse.x, mouse.y, mouse.x + 1, mouse.y + 1, true);
                currentLabel.points.push(rect.GetPoints());
                break;
            case 1:
                rect = new Rectangle(mouse.x, mouse.y, mouse.x + 1, mouse.y + 1, false);
                currentLabel.points.push(rect.GetPoints());
                break;
            case 2:
                break;
            case 3:
                break;
            default:
        }
    }
    function ClearCurrentLabel() {
        currentLabel = null;
    }
    function ClearManvas() {
        mtx.beginPath();
        mtx.clearRect(0, 0, manvas.width, manvas.height);
    }
    function CrossHair() {
        if (!preferences.crossHair)
            return;
        if (mouseEntered == false)
            return;
        mtx.strokeStyle = "white";
        mtx.lineWidth = 2;
        mtx.globalAlpha = 0.4;

        // vertical line
        mtx.moveTo(mouse.x, 0);
        mtx.lineTo(mouse.x, manvas.height);
        mtx.stroke();
        // horizontal line
        mtx.moveTo(0, mouse.y);
        mtx.lineTo(manvas.width, mouse.y);
        mtx.stroke();
        mtx.globalAlpha = 1.0;
    }
    function WriteListToConsole() {
        console.log("LABELLIST=> ", JSON.stringify(labelList));
    }
    function ResizeLabelList() {
        for (var j = 0; j < labelList.length; j++) {
            let label = labelList[j];
            let label_sizeFactor = label.sizeFactor;
            let current_sizeFactor = image.width / preferences.csize;
            let alpha = label_sizeFactor / current_sizeFactor;
            for (var i = 0; i < label.points.length; i++) {
                labelList[j].points[i].x = label.points[i].x * alpha;
                labelList[j].points[i].y = label.points[i].y * alpha;
            }
            labelList[j].sizeFactor = current_sizeFactor;
        }
    }

    function SelectLabel() {
        mouse.x;
        mouse.y;
        selectedLabel = -1;
        for (var j = 0; j < labelList.length; j++) {
            let label = labelList[j];
            if (Collision(label.points, mouse.x, mouse.y))
                selectedLabel = j;
        }
    }

    function MoveLabel(movementX, movementY) {
        for (var i = 0; i < labelList[selectedLabel].points.length; i++) {
            labelList[selectedLabel].points[i].x += movementX;
            labelList[selectedLabel].points[i].y += movementY;
        }
    }


    // Bu fonksiyon ç/alıntı. https://www.jeffreythompson.org/collision-detection/poly-point.php
    function Collision(vertices, px, py) {
        var collision = false;

        // go through each of the vertices, plus
        // the next vertex in the list
        var next = 0;
        for (var current = 0; current < vertices.length; current++) {

            // get next vertex in list
            // if we've hit the end, wrap around to 0
            next = current + 1;
            if (next == vertices.length) next = 0;

            // get the PVectors at our current position
            // this makes our if statement a little cleaner
            var vc = vertices[current];    // c for "current"
            var vn = vertices[next];       // n for "next"

            // compare position, flip 'collision' variable
            // back and forth
            if (((vc.y >= py && vn.y < py) || (vc.y < py && vn.y >= py)) &&
                (px < (vn.x - vc.x) * (py - vc.y) / (vn.y - vc.y) + vc.x)) {
                collision = !collision;
            }
        }
        return collision;
    }


    // #endregion


    /*
     zoom in zoom out yapınca kayıyor..
     serverSide içinde orjinal fotoğraf değerlerine çevirerek kaydedelim.
     getLabelList ile serverdan çekince preferences.sizeFactor'e bölerek çizdirelim.

     AYRICA TÜM JSON ALIŞVERİŞİNİ string İLE YAPALIM ve NEWTONSOFT KULLANALIM...
     */




    /*

    function GetImage() {
        if (selectedProjectID == 0) {
            $("#error").html("Bir proje seçiniz.");
            return;
        }
        new OzAjax("/Home/GetImage", POST, { navi: navi }, NaviSendSuccess).Send();
        function NaviSendSuccess(data) {
            navi = JSON.parse(data);
            if (navi.error != "") {
                $("#error").html(navi.error);
            }
            else {
                console.log(JSON.stringify(data));
            }
        }
    }

    function SelectProject(pid) {
        pid = Number(pid);
        window.location = "/?projectID=" + pid;
    }


    function PlaceAnnoList() {

        for (var i = 0; i < annoList.length; i++) {
            let btn = $("<button>");
            btn.html(annoList[i].name);
            btn.addClass("annoBtn");
            btn.data("annoid", i);
            btn.data("color", annoList[i].color);
            btn.data("textcolor", annoList[i].textColor);

            btn.click(SelectAnno);
            $("#annoListDiv").append(btn);

        }
        PaintAnnoBtns();
    }
    function PaintAnnoBtns() {
        $(".annoBtn").each(function (i, e) {
            if (i == preferences.selectedAnno) {
                let color = $(e).data("color");
                let textColor = $(e).data("textcolor");
                $(e).css({
                    "color": textColor,
                    "background-color": color,
                });
            }
            else {
                let color = $(e).data("color");
                $(e).css({
                    "color": color,
                    "background-color": "white"
                });
            }
        });
    }





    function SelectAnno() {
        let annoID = Number($(this).data("annoid"));
        preferences.selectedAnno = annoID;
        SavePreferences();
        PaintAnnoBtns();
    }
    function ChangeSeen() {
        preferences.seen = Number($("#seen").val());
        SavePreferences();
        InitNavigation();
        GetImage();
    }
    function SeenUpdate() {
        $("#seen").val(preferences.seen);
    }

    function ChangeCanvasSize(incr) {
        if (incr) {
            preferences.csize += 50;
            SavePreferences();
            CanvasSizeUpdate();
        }
        else {
            preferences.csize -= 50;
            SavePreferences();
            CanvasSizeUpdate();
        }
    }




    // #region Trigers
    $(".spnShape").click(function () {
        let shapeNo = Number($(this).data("shape"));
        preferences.shape = shapeNo;
        SavePreferences();
        ShapeUpdate();
    });
    // #endregion

*/


</script>

